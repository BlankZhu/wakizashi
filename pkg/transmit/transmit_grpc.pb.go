// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transmit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TransmitClient is the client API for Transmit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransmitClient interface {
	Transmit(ctx context.Context, opts ...grpc.CallOption) (Transmit_TransmitClient, error)
}

type transmitClient struct {
	cc grpc.ClientConnInterface
}

func NewTransmitClient(cc grpc.ClientConnInterface) TransmitClient {
	return &transmitClient{cc}
}

func (c *transmitClient) Transmit(ctx context.Context, opts ...grpc.CallOption) (Transmit_TransmitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Transmit_serviceDesc.Streams[0], "/transmit.transmit/transmit", opts...)
	if err != nil {
		return nil, err
	}
	x := &transmitTransmitClient{stream}
	return x, nil
}

type Transmit_TransmitClient interface {
	Send(*TransmitRequest) error
	CloseAndRecv() (*TransmitReply, error)
	grpc.ClientStream
}

type transmitTransmitClient struct {
	grpc.ClientStream
}

func (x *transmitTransmitClient) Send(m *TransmitRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transmitTransmitClient) CloseAndRecv() (*TransmitReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TransmitReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransmitServer is the server API for Transmit service.
// All implementations must embed UnimplementedTransmitServer
// for forward compatibility
type TransmitServer interface {
	Transmit(Transmit_TransmitServer) error
	mustEmbedUnimplementedTransmitServer()
}

// UnimplementedTransmitServer must be embedded to have forward compatible implementations.
type UnimplementedTransmitServer struct {
}

func (UnimplementedTransmitServer) Transmit(Transmit_TransmitServer) error {
	return status.Errorf(codes.Unimplemented, "method Transmit not implemented")
}
func (UnimplementedTransmitServer) mustEmbedUnimplementedTransmitServer() {}

// UnsafeTransmitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransmitServer will
// result in compilation errors.
type UnsafeTransmitServer interface {
	mustEmbedUnimplementedTransmitServer()
}

func RegisterTransmitServer(s grpc.ServiceRegistrar, srv TransmitServer) {
	s.RegisterService(&_Transmit_serviceDesc, srv)
}

func _Transmit_Transmit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransmitServer).Transmit(&transmitTransmitServer{stream})
}

type Transmit_TransmitServer interface {
	SendAndClose(*TransmitReply) error
	Recv() (*TransmitRequest, error)
	grpc.ServerStream
}

type transmitTransmitServer struct {
	grpc.ServerStream
}

func (x *transmitTransmitServer) SendAndClose(m *TransmitReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transmitTransmitServer) Recv() (*TransmitRequest, error) {
	m := new(TransmitRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Transmit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transmit.transmit",
	HandlerType: (*TransmitServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "transmit",
			Handler:       _Transmit_Transmit_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "transmit.proto",
}
